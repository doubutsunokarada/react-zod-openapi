import { type Intent, type Submission } from '@conform-to/dom';
import { type ZodTypeAny, type ZodErrorMap, type input, type output, type ZodIssue } from 'zod';
export declare function parseWithZod<Schema extends ZodTypeAny>(payload: FormData | URLSearchParams, options: {
    schema: Schema | ((intent: Intent | null) => Schema);
    async?: false;
    errorMap?: ZodErrorMap;
}): Submission<input<Schema>, string[], output<Schema>>;
export declare function parseWithZod<Schema extends ZodTypeAny, FormError>(payload: FormData | URLSearchParams, options: {
    schema: Schema | ((intent: Intent | null) => Schema);
    async?: false;
    errorMap?: ZodErrorMap;
    formatError: (issues: Array<ZodIssue>) => FormError;
}): Submission<input<Schema>, FormError, output<Schema>>;
export declare function parseWithZod<Schema extends ZodTypeAny>(payload: FormData | URLSearchParams, options: {
    schema: Schema | ((intent: Intent | null) => Schema);
    async: true;
    errorMap?: ZodErrorMap;
}): Promise<Submission<input<Schema>, string[], output<Schema>>>;
export declare function parseWithZod<Schema extends ZodTypeAny, FormError>(payload: FormData | URLSearchParams, options: {
    schema: Schema | ((intent: Intent | null) => Schema);
    async: true;
    errorMap?: ZodErrorMap;
    formatError: (issues: Array<ZodIssue>) => FormError;
}): Promise<Submission<input<Schema>, FormError, output<Schema>>>;
export declare const conformZodMessage: {
    VALIDATION_SKIPPED: string;
    VALIDATION_UNDEFINED: string;
};
